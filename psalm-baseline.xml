<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.18.0@b113f3ed0259fd6e212d87c3df80eec95a6abf19">
  <file src="src/EventManager.php">
    <DocblockTypeContradiction>
      <code>is_string($eventName)</code>
      <code>is_string($eventName)</code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$force</code>
    </MissingParamType>
    <MixedArgumentTypeCoercion>
      <code>$identifiers</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$listOfListenersByPriority[$priority][]</code>
      <code>$listener</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$response</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$listener($event)</code>
    </MixedFunctionCall>
    <RedundantCastGivenDocblockType>
      <code>(int) $priority</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/EventManagerAwareInterface.php">
    <UnusedClass>
      <code>EventManagerAwareInterface</code>
    </UnusedClass>
  </file>
  <file src="src/EventManagerAwareTrait.php">
    <MissingConstructor>
      <code>$events</code>
    </MissingConstructor>
    <MissingReturnType>
      <code>setEventManager</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>getEventManager</code>
    </PossiblyUnusedMethod>
    <RedundantCondition>
      <code><![CDATA[(is_string($this->eventIdentifier))
                || (is_array($this->eventIdentifier))]]></code>
      <code><![CDATA[is_string($this->eventIdentifier)]]></code>
      <code><![CDATA[isset($this->eventIdentifier)]]></code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code><![CDATA[$this->eventIdentifier instanceof Traversable]]></code>
      <code><![CDATA[(is_string($this->eventIdentifier))
                || (is_array($this->eventIdentifier))]]></code>
      <code><![CDATA[(is_string($this->eventIdentifier))
                || (is_array($this->eventIdentifier))
                || $this->eventIdentifier instanceof Traversable]]></code>
      <code><![CDATA[(is_string($this->eventIdentifier))
                || (is_array($this->eventIdentifier))
                || $this->eventIdentifier instanceof Traversable]]></code>
      <code><![CDATA[is_array($this->eventIdentifier)]]></code>
      <code><![CDATA[is_object($this->eventIdentifier)]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/EventsCapableInterface.php">
    <PossiblyUnusedMethod>
      <code>getEventManager</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Filter/FilterInterface.php">
    <MissingReturnType>
      <code>attach</code>
    </MissingReturnType>
  </file>
  <file src="src/Filter/FilterIterator.php">
    <InvalidArgument>
      <code>$value</code>
    </InvalidArgument>
    <LessSpecificImplementedReturnType>
      <code>mixed</code>
    </LessSpecificImplementedReturnType>
    <MixedArgument>
      <code><![CDATA[$item['data']]]></code>
      <code><![CDATA[$item['priority']]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$item['data']]]></code>
      <code><![CDATA[$item['data']]]></code>
      <code><![CDATA[$item['priority']]]></code>
    </MixedArrayAccess>
    <MoreSpecificImplementedParamType>
      <code>$value</code>
    </MoreSpecificImplementedParamType>
    <PossiblyInvalidArrayAccess>
      <code><![CDATA[$item['data']]]></code>
      <code><![CDATA[$item['data']]]></code>
      <code><![CDATA[$item['priority']]]></code>
    </PossiblyInvalidArrayAccess>
  </file>
  <file src="src/FilterChain.php">
    <ImplementedReturnTypeMismatch>
      <code>Filter\FilterIterator</code>
      <code>null|ResponseCollection</code>
    </ImplementedReturnTypeMismatch>
    <InvalidReturnStatement>
      <code>$callback</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>CallbackHandler</code>
    </InvalidReturnType>
    <MixedFunctionCall>
      <code>$next($context, $argv, $chain)</code>
    </MixedFunctionCall>
    <ParamNameMismatch>
      <code>$argv</code>
    </ParamNameMismatch>
    <PossiblyInvalidFunctionCall>
      <code>$next($context, $argv, $chain)</code>
    </PossiblyInvalidFunctionCall>
    <UndefinedDocblockClass>
      <code>CallbackHandler</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/LazyListener.php">
    <InvalidMethodCall>
      <code>$method</code>
    </InvalidMethodCall>
    <MixedAssignment>
      <code><![CDATA[$this->listener]]></code>
      <code><![CDATA[$this->listener]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>callable</code>
      <code>callable</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$listener->{$method}($event)]]></code>
      <code><![CDATA[$this->listener]]></code>
      <code><![CDATA[$this->listener]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedReturnValue>
      <code>callable</code>
    </PossiblyUnusedReturnValue>
    <PropertyNotSetInConstructor>
      <code>$listener</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/LazyListenerAggregate.php">
    <UnusedProperty>
      <code>$container</code>
      <code>$env</code>
    </UnusedProperty>
  </file>
  <file src="src/ResponseCollection.php">
    <MissingReturnType>
      <code>setStopped</code>
    </MissingReturnType>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/SharedEventManager.php">
    <DocblockTypeContradiction>
      <code>! is_string($event)</code>
      <code>! is_string($eventName)</code>
      <code>! is_string($eventName)</code>
      <code>! is_string($identifier)</code>
      <code>! is_string($identifier)</code>
      <code>! is_string($identifier)</code>
      <code><![CDATA['*' === $eventName || ! is_string($eventName)]]></code>
      <code><![CDATA['*' === $identifier || ! is_string($identifier)]]></code>
    </DocblockTypeContradiction>
    <MissingParamType>
      <code>$force</code>
    </MissingParamType>
    <MissingReturnType>
      <code>clearListeners</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$listOfListeners</code>
      <code><![CDATA[$this->identifiers[$identifier]]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$eventName</code>
      <code>$identifier</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$listenersByIdentifier[$eventName]</code>
      <code><![CDATA[$listenersByIdentifier['*']]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority][$index]]]></code>
      <code>$wildcardIdentifier[$eventName]</code>
      <code><![CDATA[$wildcardIdentifier['*']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$this->identifiers[$identifier][$event]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$event][(int) $priority]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code>$returnListeners[$priority]</code>
      <code>$returnListeners[$priority]</code>
      <code>$returnListeners[$priority]</code>
      <code>$returnListeners[$priority]</code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority]]]></code>
      <code><![CDATA[$this->identifiers[$identifier][$eventName][$priority][$index]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$evaluatedListener</code>
      <code>$index</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$listenersByIdentifier</code>
      <code>$priority</code>
      <code>$priority</code>
      <code>$priority</code>
      <code>$priority</code>
      <code>$priority</code>
      <code>$returnListeners[$priority][]</code>
      <code>$returnListeners[$priority][]</code>
      <code>$returnListeners[$priority][]</code>
      <code>$returnListeners[$priority][]</code>
      <code>$wildcardIdentifier</code>
    </MixedAssignment>
    <MoreSpecificImplementedParamType>
      <code>$identifiers</code>
    </MoreSpecificImplementedParamType>
    <ParamNameMismatch>
      <code>$event</code>
    </ParamNameMismatch>
    <RedundantCastGivenDocblockType>
      <code>(int) $priority</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/SharedEventManagerInterface.php">
    <MissingReturnType>
      <code>attach</code>
      <code>clearListeners</code>
    </MissingReturnType>
  </file>
  <file src="src/Test/EventListenerIntrospectionTrait.php">
    <InvalidReturnType>
      <code>Traversable</code>
    </InvalidReturnType>
    <MissingReturnType>
      <code>assertListenerAtPriority</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$l</code>
      <code>$listeners</code>
      <code>$listeners[$p]</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$internal[$event]</code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code>$listeners[$p]</code>
      <code>$listeners[$p]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$internal</code>
      <code>$l</code>
      <code>$listOfListeners</code>
      <code>$listener</code>
      <code>$listener</code>
      <code>$listeners</code>
      <code>$listeners</code>
      <code>$listeners[$p]</code>
      <code>$p</code>
      <code>$priority</code>
    </MixedAssignment>
    <MixedReturnTypeCoercion>
      <code>callable[]</code>
      <code>string[]</code>
    </MixedReturnTypeCoercion>
  </file>
  <file src="test/DeprecatedAssertions.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="test/EventManagerAwareTraitTest.php">
    <DeprecatedMethod>
      <code>getObjectForTrait</code>
      <code>getObjectForTrait</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>EventManagerAwareTrait::class</code>
      <code>EventManagerAwareTrait::class</code>
    </InvalidArgument>
    <MixedMethodCall>
      <code>getEventManager</code>
      <code>getEventManager</code>
      <code>setEventManager</code>
      <code>setEventManager</code>
    </MixedMethodCall>
  </file>
  <file src="test/EventManagerPriorityTest.php">
    <MissingClosureParamType>
      <code>$event</code>
    </MissingClosureParamType>
    <MixedArgument>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
      <code><![CDATA[$event->getParam('accumulator')]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$compare</code>
      <code>$original</code>
      <code>$original</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>enqueue</code>
      <code>getParam</code>
    </MixedMethodCall>
  </file>
  <file src="test/EventManagerTest.php">
    <MissingClosureParamType>
      <code>$result</code>
      <code>$result</code>
    </MissingClosureParamType>
  </file>
  <file src="test/EventTest.php">
    <InvalidArgument>
      <code><![CDATA['test']]></code>
    </InvalidArgument>
    <UnusedVariable>
      <code>$default</code>
    </UnusedVariable>
  </file>
  <file src="test/FilterChainTest.php">
    <DocblockTypeContradiction>
      <code>assertSame</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$handle</code>
      <code>$handle1</code>
    </InvalidArgument>
    <MissingClosureParamType>
      <code>$chain</code>
      <code>$chain</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$params</code>
      <code>$params</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function ($context, $params, $chain) {</code>
      <code>function ($context, $params, $chain) {</code>
    </MissingClosureReturnType>
    <MixedArgument>
      <code><![CDATA[$params['string']]]></code>
      <code><![CDATA[$params['string']]]></code>
      <code>$string</code>
      <code>$string</code>
      <code>$string</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$params['string']]]></code>
      <code><![CDATA[$params['string']]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$params['string']]]></code>
      <code><![CDATA[$params['string']]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$string</code>
      <code>$string</code>
      <code>$string</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>next</code>
      <code>next</code>
    </MixedMethodCall>
  </file>
  <file src="test/FilterIteratorTest.php">
    <MissingClosureReturnType>
      <code>function () {</code>
      <code>function () {</code>
      <code>function () {</code>
    </MissingClosureReturnType>
    <MissingReturnType>
      <code>testInsertShouldRaiseExceptionOnNonCallableDatum</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$filter</code>
    </MixedArgument>
  </file>
  <file src="test/LazyEventListenerTest.php">
    <LessSpecificReturnStatement>
      <code>$listener</code>
    </LessSpecificReturnStatement>
    <MissingReturnType>
      <code>testCanRetrieveEventFromListener</code>
      <code>testCanRetrievePriorityFromListener</code>
      <code>testConstructorRaisesExceptionForInvalidEventType</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>getPriority</code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
    </MixedMethodCall>
    <MoreSpecificReturnType>
      <code>LazyListener</code>
    </MoreSpecificReturnType>
  </file>
  <file src="test/LazyListenerAggregateTest.php">
    <MissingReturnType>
      <code>testAttachAttachesLazyListenersViaClosures</code>
      <code>testPassingInvalidListenerTypesAtInstantiationRaisesException</code>
      <code>testPassingInvalidListenersAtInstantiationRaisesException</code>
    </MissingReturnType>
    <MixedArrayAccess>
      <code>$test[0]</code>
      <code>$test[1]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$listener</code>
      <code>$listeners</code>
      <code>$test</code>
    </MixedAssignment>
  </file>
  <file src="test/LazyListenerTest.php">
    <InvalidFunctionCall>
      <code>$lazyListener($event)</code>
      <code>$lazyListener($event)</code>
    </InvalidFunctionCall>
    <LessSpecificReturnStatement>
      <code>$listener</code>
    </LessSpecificReturnStatement>
    <MissingReturnType>
      <code>testConstructorRaisesExceptionForInvalidListenerType</code>
      <code>testConstructorRaisesExceptionForInvalidMethodType</code>
      <code>testInstatiationSetsListenerMethod</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>new $class($struct, $container, $env)</code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
      <code><![CDATA[new $class($struct, $this->container)]]></code>
    </MixedMethodCall>
    <MoreSpecificReturnType>
      <code>LazyListener</code>
    </MoreSpecificReturnType>
  </file>
  <file src="test/SharedEventManagerTest.php">
    <MissingReturnType>
      <code>testAttachRaisesExceptionForInvalidEvent</code>
      <code>testAttachRaisesExceptionForInvalidIdentifer</code>
      <code>testCanDetachFromSharedManagerUsingIdentifierAndEvent</code>
      <code>testDetachingWithInvalidEventTypeRaisesException</code>
      <code>testDetachingWithInvalidIdentifierTypeRaisesException</code>
      <code>testGetListenersRaisesExceptionForInvalidEventName</code>
      <code>testGetListenersRaisesExceptionForInvalidIdentifier</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$event</code>
      <code>$eventName</code>
      <code>$eventName</code>
      <code>$identifier</code>
      <code>$identifier</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$identifiers</code>
      <code>[$identifier]</code>
    </MixedArgumentTypeCoercion>
    <MixedReturnTypeCoercion>
      <code>$listeners[$priority]</code>
      <code>callable[]</code>
    </MixedReturnTypeCoercion>
    <PossiblyInvalidArgument>
      <code>$event</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidCast>
      <code>$event</code>
    </PossiblyInvalidCast>
    <RedundantCast>
      <code>(int) $priority</code>
    </RedundantCast>
    <RedundantCondition>
      <code>assertIsArray</code>
      <code>assertIsArray</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
    <UnusedVariable>
      <code>$callback</code>
    </UnusedVariable>
  </file>
  <file src="test/SharedListenerIntegrationTest.php">
    <InvalidPropertyFetch>
      <code><![CDATA[$listener->count]]></code>
    </InvalidPropertyFetch>
  </file>
  <file src="test/Test/EventListenerIntrospectionTraitTest.php">
    <MissingClosureParamType>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
      <code>function ($e) {}</code>
    </MissingClosureReturnType>
    <RedundantConditionGivenDocblockType>
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
    <UnusedClosureParam>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
      <code>$e</code>
    </UnusedClosureParam>
  </file>
  <file src="test/TestAsset/BuilderInterface.php">
    <MissingReturnType>
      <code>build</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>build</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/TestAsset/CountingListener.php">
    <PossiblyUnusedProperty>
      <code>$index</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="test/TestAsset/MockAbstractListenerAggregate.php">
    <MissingReturnType>
      <code>doFoo</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/MockListenerAggregateTrait.php">
    <MissingReturnType>
      <code>doFoo</code>
    </MissingReturnType>
  </file>
</files>
